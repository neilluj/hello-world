from snowflake.snowpark import functions as F
from snowflake.snowpark.window import Window

def operaciones_periodo(df, modo="m"):
    """
    Devuelve un DF a nivel ID_USUARIO, ID_OPERACION y PERIODO (último día del mes o semana)
    con el número de días con operaciones en los tres periodos anteriores.
    
    df: DataFrame con columnas ID_USUARIO, ID_OPERACION, FECHA_OPERACION
    modo: 'm' para mensual, 's' para semanal
    """
    
    # 1️⃣ Crear columna PERIODO (último día del mes o semana)
    if modo == "m":
        df = df.with_column("PERIODO", F.last_day(F.col("FECHA_OPERACION"), "month"))
        unidad = "month"
        sufijo = "MES"
    elif modo == "s":
        # semana que inicia lunes → último día = inicio semana + 6 días
        df = df.with_column("PERIODO", F.dateadd("day", 6, F.date_trunc("week", F.col("FECHA_OPERACION"))))
        unidad = "week"
        sufijo = "SEMANA"
    else:
        raise ValueError("modo debe ser 'm' o 's'")
    
    # 2️⃣ Contar días únicos con operación por usuario y periodo
    df_dias = (
        df.group_by("ID_USUARIO", "PERIODO")
          .agg(F.count_distinct(F.col("FECHA_OPERACION")).alias("DIAS_OPERACION"))
    )
    
    # 3️⃣ Crear ventana para calcular los 3 periodos anteriores
    w = Window.partition_by("ID_USUARIO").order_by(F.col("PERIODO"))
    
    df_dias = (
        df_dias
        .with_column(f"DIAS_HACE_1_{sufijo}", F.lag("DIAS_OPERACION", 1).over(w))
        .with_column(f"DIAS_HACE_2_{sufijo}", F.lag("DIAS_OPERACION", 2).over(w))
        .with_column(f"DIAS_HACE_3_{sufijo}", F.lag("DIAS_OPERACION", 3).over(w))
    )
    
    # 4️⃣ Unir con la tabla original para incluir ID_OPERACION
    result = df.join(
        df_dias,
        on=["ID_USUARIO", "PERIODO"],
        how="left"
    ).select(
        "ID_USUARIO", "ID_OPERACION", "PERIODO",
        f"DIAS_HACE_1_{sufijo}",
        f"DIAS_HACE_2_{sufijo}",
        f"DIAS_HACE_3_{sufijo}"
    )
    
    return result