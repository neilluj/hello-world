import pandas as pd
import numpy as np

def calcular_deciles_por_categoria(df, col_categoria="categoría", col_valor="valor"):
    """
    Calcula los deciles de una columna de valores agrupando por una columna de categoría.

    Parámetros
    ----------
    df : pd.DataFrame
        DataFrame de entrada que contiene al menos dos columnas: una de categoría y otra de valores numéricos.
    col_categoria : str, default="categoría"
        Nombre de la columna de categorías.
    col_valor : str, default="valor"
        Nombre de la columna con los valores numéricos.

    Returns
    -------
    df_con_deciles : pd.DataFrame
        DataFrame original con una columna adicional "decil" que indica a qué decil pertenece cada fila,
        calculado dentro de cada categoría. Los valores NaN en la columna de valores se mantienen sin decil.
    
    df_deciles_por_categoria : pd.DataFrame
        DataFrame con una fila por categoría y columnas "decil_10", "decil_20", ..., "decil_90"
        que representan los puntos de corte de cada decil en la distribución de valores de esa categoría.
    """

    df_copy = df.copy()

    # Asignar deciles por categoría
    df_copy["decil"] = df_copy.groupby(col_categoria)[col_valor]\
                              .transform(lambda x: rank_values(x))

    # Calcular puntos de corte de los deciles (10%,20%,...,90%) dentro de cada categoría
    decil_cuts = df_copy.groupby(col_categoria)[col_valor]\
                        .quantile([i/10 for i in range(1, 10)])\
                        .unstack()

    # Renombrar columnas
    decil_cuts.columns = [f"decil_{int(q*100)}" for q in decil_cuts.columns]

    return df_copy, decil_cuts


def rank_values(series):
    """
    Asigna deciles a una serie de valores numéricos.
    Maneja NaN manteniéndolos como NaN en el resultado.

    Parámetros
    ----------
    series : pd.Series
        Serie numérica posiblemente con valores NaN.

    Returns
    -------
    pd.Series
        Serie con los números de decil (1-10).
    """
    if series.notna().sum() == 0:
        return pd.Series([np.nan] * len(series), index=series.index)
    
    ranks = series.rank(pct=True)  # ranking relativo (0 a 1)
    deciles = np.ceil(ranks * 10)  # escalar a 10 deciles
    deciles[series.isna()] = np.nan
    return deciles.astype("float")