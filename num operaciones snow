from snowflake.snowpark import functions as F
from snowflake.snowpark.window import Window

def num_operaciones_periodo_snowpark_opt(df, col_usuario: str, col_operacion: str, col_fecha: str, modo: str = "m"):
    """
    Versión funcional en Snowpark:
    DF único por usuario, operación y PERIODO (último día del mes o semana)
    con número de días con operaciones en los tres periodos anteriores.
    """

    # 1️⃣ Calcular columna de fecha y periodo
    fecha_col = F.to_date(F.substring(F.col(col_fecha), 1, 10))
    if modo == "m":
        periodo_col = F.last_day(fecha_col)
        sufijo = "M"
    elif modo == "s":
        periodo_col = F.dateadd("day", 6, F.date_trunc("week", fecha_col))
        sufijo = "SEM"
    else:
        raise ValueError("modo debe ser 'm' o 's'")

    df = df.with_column("PERIODO", periodo_col)
    df = df.with_column("FECHA_CONVERTIDA", fecha_col)

    # 2️⃣ Agrupar por usuario, operación y periodo
    df_agg = (
        df.group_by(col_usuario, col_operacion, F.col("PERIODO"))
          .agg(F.count("FECHA_CONVERTIDA").alias(f"NUM_OPER_{sufijo}"))
    )

    # 3️⃣ Lags con ventana
    w = Window.partition_by(col_usuario, col_operacion).order_by(F.col("PERIODO"))
    for i in range(1, 4):
        df_agg = df_agg.with_column(f"NUM_OPER_{sufijo}_{i}", F.lag(f"NUM_OPER_{sufijo}", i).over(w))

    # 4️⃣ Reemplazar nulos por 0
    for i in range(0, 4):
        col_name = f"NUM_OPER_{sufijo}" if i == 0 else f"NUM_OPER_{sufijo}_{i}"
        df_agg = df_agg.with_column(col_name, F.coalesce(F.col(col_name), F.lit(0)))

    # 5️⃣ Pivot separado por cada métrica
    pivots = []
    for i in range(0, 4):
        col_name = f"NUM_OPER_{sufijo}" if i == 0 else f"NUM_OPER_{sufijo}_{i}"
        pivots.append(
            df_agg.group_by(col_usuario, "PERIODO")
                 .pivot(col_operacion)
                 .agg(F.sum(col_name).alias(col_name))
        )

    # 6️⃣ Unir todos los pivots por llaves (usuario, periodo)
    pivot_df = pivots[0]
    for p in pivots[1:]:
        pivot_df = pivot_df.join(p, on=[col_usuario, "PERIODO"], how="outer")

    return pivot_df