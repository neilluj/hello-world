from snowflake.snowpark import functions as F
from snowflake.snowpark.window import Window

def operaciones_periodo(df, col_fecha: str, col_operacion: str, col_usuario: str, m: str):
    """
    Devuelve conteos por periodo y lags T-1, T-2, T-3 (mensual o semanal).
    Usa lag() para calcular los lags por usuario+operacion ordenado por PERIODO.
    """
    # 1) Limpiar y truncar la fecha (solo YYYY-MM-DD)
    df = df.with_column("FECHA_LIMPIA", F.to_date(F.substring(F.col(col_fecha), 1, 10)))

    # 2) Crear PERIODO según mensual/semanal
    if m == "mensual":
        df = df.with_column("PERIODO", F.date_trunc("month", F.col("FECHA_LIMPIA")))
    elif m == "semanal":
        df = df.with_column("PERIODO", F.date_trunc("week", F.col("FECHA_LIMPIA")))
    else:
        raise ValueError("El parámetro m debe ser 'mensual' o 'semanal'")

    # 3) Agregar conteo por user/op/periodo
    base = (
        df.group_by(col_usuario, col_operacion, "PERIODO")
          .agg(F.count("*").alias("OPERACIONES"))
    )

    # 4) Definir ventana por usuario+operación ordenada por periodo ascendente
    win = Window.partition_by(F.col(col_usuario), F.col(col_operacion)).order_by(F.col("PERIODO"))

    # 5) Calcular lags T-1, T-2, T-3 usando lag()
    base = base.with_column("OPERACIONES_T-1", F.lag(F.col("OPERACIONES"), 1).over(win)) \
               .with_column("OPERACIONES_T-2", F.lag(F.col("OPERACIONES"), 2).over(win)) \
               .with_column("OPERACIONES_T-3", F.lag(F.col("OPERACIONES"), 3).over(win))

    # 6) Rellenar NULLs por 0 en los lags (y opcionalmente en OPERACIONES)
    base = base.with_column("OPERACIONES_T-1", F.coalesce(F.col("OPERACIONES_T-1"), F.lit(0))) \
               .with_column("OPERACIONES_T-2", F.coalesce(F.col("OPERACIONES_T-2"), F.lit(0))) \
               .with_column("OPERACIONES_T-3", F.coalesce(F.col("OPERACIONES_T-3"), F.lit(0))) \
               .with_column("OPERACIONES", F.coalesce(F.col("OPERACIONES"), F.lit(0)))

    return base